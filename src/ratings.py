"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ –±–æ—Ç–∞.
"""

import csv
import os
from datetime import datetime
import logging
from typing import Dict, Tuple

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏
RATINGS_FILE = os.path.join(os.path.dirname(__file__), "..", "data", "ratings.csv")

# ID —á–∞—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
ADMIN_CHAT_ID = -1002490051402

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID)
ADMIN_IDS = [7613724879]

def ensure_ratings_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ."""
    os.makedirs(os.path.dirname(RATINGS_FILE), exist_ok=True)
    if not os.path.exists(RATINGS_FILE):
        with open(RATINGS_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'timestamp', 'rating'])

def save_rating(user_id: int, rating: str) -> bool:
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ—Ü—ñ–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        ensure_ratings_file()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        with open(RATINGS_FILE, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([user_id, timestamp, rating])
        return True
    except Exception as e:
        logging.error(f"Error saving rating: {e}")
        return False

def get_stats() -> Tuple[int, int]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ü—ñ–Ω–æ–∫ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤ —ñ –¥–∏–∑–ª–∞–π–∫—ñ–≤)."""
    try:
        ensure_ratings_file()
        likes = dislikes = 0
        
        with open(RATINGS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row['rating'] == 'üëç':
                    likes += 1
                elif row['rating'] == 'üëé':
                    dislikes += 1
                    
        return likes, dislikes
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        return 0, 0

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS 