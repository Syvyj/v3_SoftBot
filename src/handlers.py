"""
–ú–æ–¥—É–ª—å –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞.
"""

import logging
from pathlib import Path
from aiogram import types
from aiogram.filters.command import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from .texts import (
    TEXTS,
    DOWNLOAD_URLS,
    ADMIN_CHAT_ID,
    TRACKER_ADMIN_CHAT_ID,
    PROGRAM_INFO
)
from .keyboards import (
    get_main_keyboard,
    get_yaware_keyboard,
    get_help_keyboard,
    get_back_keyboard,
    get_request_keyboard,
    get_download_button,
    get_other_programs_keyboard,
    get_rating_keyboard
)
from .faq import find_answer, get_next_ticket_number

# –®–ª—è—Ö–∏ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å
IMAGES_DIR = Path(__file__).parent.parent / "images"
WELCOME_IMAGE_PATH = IMAGES_DIR / "help_bot.png"
ADMIN_IMAGE_PATH = IMAGES_DIR / "serio.png"
SAD_ROBOT_PATH = IMAGES_DIR / "sad_robot.png"

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
IMAGES_DIR.mkdir(exist_ok=True)

# –°—Ç–∞–Ω–∏ FSM
class UserState(StatesGroup):
    WAITING_FOR_PROBLEM = State()
    WAITING_FOR_CONFIRMATION = State()

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await state.clear()
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        welcome_image = FSInputFile(WELCOME_IMAGE_PATH)
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
        await message.answer_photo(
            welcome_image,
            caption=TEXTS["welcome"],
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Error in cmd_start: {e}")
        await message.answer(
            TEXTS["welcome"],
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )

async def cmd_help(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    await message.answer(
        TEXTS["help"],
        parse_mode="Markdown"
    )

async def handle_main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if message.text == "üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä":
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–≥–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        await message.answer(
            TEXTS["yaware_info"],
            parse_mode="Markdown"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ç—Ä–µ–∫–µ—Ä–∞
        await message.answer(
            TEXTS["yaware_details"],
            parse_mode="Markdown"
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        info_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ß—Ç–æ —Ç–∞–∫–æ–µ Yaware?",
                        url="https://yaware.com.ua/uk/what-is-yaware/"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="Yaware - –ø—Ä–æ–≥—Ä–∞–º–º–∞ —à–ø–∏–æ–Ω?",
                        url="https://yaware.com.ua/uk/blog/tajm-treker-ne-shpigunske-programne-zabezpechennya-u-chomu-rizniczya/"
                    )
                ]
            ]
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        await message.answer(
            "üëá –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            reply_markup=info_keyboard
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –≤–µ—Ä—Å—ñ—ó
        await message.answer(
            TEXTS["yaware_install"],
            reply_markup=get_yaware_keyboard(),
            parse_mode="Markdown"
        )
    elif message.text == "‚úÖ –Ø —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª":
        await message.answer(
            TEXTS["installation_success"],
            reply_markup=get_request_keyboard(),
            parse_mode="Markdown"
        )
    elif message.text == "üîß –î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        await message.answer(
            TEXTS["other_programs"],
            reply_markup=get_other_programs_keyboard(),
            parse_mode="Markdown"
        )
    elif message.text == "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞":
        await state.set_state(UserState.WAITING_FOR_PROBLEM)
        await message.answer(
            TEXTS["help_request"],
            reply_markup=get_back_keyboard()
        )

async def handle_yaware_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è YaWare"""
    if message.text == "ü™ü Windows":
        await message.answer(
            "üéâ *–û—Ç–ª–∏—á–Ω–æ!* –ù–∏–∂–µ –ø–æ —Å—Å—ã–ª–∫–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å **YaWare –¥–ª—è Windows** ‚¨áÔ∏èü™ü.\n\n"
            "–¢–∞–∫–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–µ—Ä–æ–º üìãüõ†Ô∏è.\n\n"
            "‚ö†Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ç—Ä–µ–∫–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ **–æ—Ç–¥–µ–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å** –Ω–∞ –ª–∏—á–Ω–æ–º –∏–ª–∏ —Ä–∞–±–æ—á–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ üñ•Ô∏èüîí.",
            reply_markup=get_download_button(DOWNLOAD_URLS["windows"]),
            parse_mode="Markdown"
        )
    elif message.text == "üçé MacOS":
        await message.answer(
            "üéâ *–û—Ç–ª–∏—á–Ω–æ!* –ù–∏–∂–µ –ø–æ —Å—Å—ã–ª–∫–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å **YaWare –¥–ª—è MacOS** ‚¨áÔ∏èüçè.\n\n"
            "–¢–∞–∫–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–µ—Ä–æ–º üìãüõ†Ô∏è.\n\n"
            "‚ö†Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ç—Ä–µ–∫–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ **–æ—Ç–¥–µ–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å** –Ω–∞ –ª–∏—á–Ω–æ–º –∏–ª–∏ —Ä–∞–±–æ—á–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ üñ•Ô∏èüîí.",
            reply_markup=get_download_button(DOWNLOAD_URLS["macos"]),
            parse_mode="Markdown"
        )
    elif message.text == "üåê –ü–ª–∞–≥–∏–Ω":
        await message.answer(
            "üéâ *–û—Ç–ª–∏—á–Ω–æ!* –ù–∏–∂–µ –ø–æ —Å—Å—ã–ª–∫–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω YaWare –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ ‚¨áÔ∏èüåê.\n\n"
            "–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–≥–∏–Ω YaWare –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞:",
            reply_markup=get_download_button(DOWNLOAD_URLS["plugin"]),
            parse_mode="Markdown"
        )
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_start(message, state)

async def handle_help_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É"""
    current_state = await state.get_state()
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await cmd_start(message, state)
        return
    
    if message.text == "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:",
            reply_markup=get_back_keyboard()
        )
        return
        
    if current_state == UserState.WAITING_FOR_PROBLEM.state:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await state.update_data(user_message=message.text)
            
        # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ FAQ
        answer = find_answer(message.text)
        if answer:
            await message.answer(
                answer,
                reply_markup=get_help_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—É–º–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä—ñ—à–µ–Ω–Ω—è
            sad_robot = FSInputFile(SAD_ROBOT_PATH)
            await message.answer_photo(
                sad_robot,
                caption=TEXTS["no_solution"],
                parse_mode="Markdown"
            )
            
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            await message.answer(
                "–•–æ—á–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∑–∞ –ø–æ–º–æ—â—å—é?",
                reply_markup=get_help_keyboard(),
                parse_mode="Markdown"
            )

async def handle_admin_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        username = f"@{message.from_user.username}" if message.from_user.username else f"id{message.from_user.id}"
        user_id = message.from_user.id
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚Ü©Ô∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
                        callback_data=f"reply_{user_id}"
                    )]
                ]
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç FSInputFile –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            admin_image = FSInputFile(ADMIN_IMAGE_PATH)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await message.bot.send_photo(
                TRACKER_ADMIN_CHAT_ID,
                admin_image,
                caption=TEXTS["admin_install_request"].format(username=username),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—Ö
            await message.answer(
                TEXTS["request_sent"],
                parse_mode="Markdown"
            )
            
            # –ü—Ä–æ—Å–∏–º–æ –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
            await message.answer(
                TEXTS["rate_request"],
                reply_markup=get_rating_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"Failed to send message to admin chat: {e}")
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Oleh_Evrius –∏–ª–∏ @Oleksii_SysAdmin –Ω–∞–ø—Ä—è–º—É.",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()
        
    elif message.text == "üîß –î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        await message.answer(
            TEXTS["other_programs"],
            reply_markup=get_other_programs_keyboard(),
            parse_mode="Markdown"
        )
        
    elif message.text == "üë®‚Äçüíª –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É":
        state_data = await state.get_data()
        user_message = state_data.get("user_message", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        username = f"@{message.from_user.username}" if message.from_user.username else f"id{message.from_user.id}"
        user_id = message.from_user.id
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚Ü©Ô∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
                        callback_data=f"reply_{user_id}"
                    )]
                ]
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç FSInputFile –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            admin_image = FSInputFile(ADMIN_IMAGE_PATH)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await message.bot.send_photo(
                ADMIN_CHAT_ID,
                admin_image,
                caption=TEXTS["admin_help_request"].format(
                    ticket_number=get_next_ticket_number(),
                    username=username,
                    user_message=user_message
                ),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —â–æ–¥–æ AnyDesk
            anydesk_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AnyDesk",
                        url=DOWNLOAD_URLS["anydesk"]
                    )]
                ]
            )
            
            await message.answer(
                TEXTS["anydesk_recommendation"],
                reply_markup=anydesk_keyboard,
                parse_mode="Markdown"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—Ö
            await message.answer(
                TEXTS["request_sent"],
                parse_mode="Markdown"
            )
            
            # –ü—Ä–æ—Å–∏–º–æ –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
            await message.answer(
                TEXTS["rate_request"],
                reply_markup=get_rating_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"Failed to send message to admin chat: {e}")
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Oleh_Evrius –∏–ª–∏ @Oleksii_SysAdmin –Ω–∞–ø—Ä—è–º—É.",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()
        
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await cmd_start(message, state)

async def handle_other_programs(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é —ñ–Ω—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
    elif message.text == "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞":
        await state.set_state(UserState.WAITING_FOR_PROBLEM)
        await message.answer(
            TEXTS["help_request"],
            reply_markup=get_back_keyboard()
        )
    elif message.text in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"]:
        program_mapping = {
            "1Ô∏è‚É£": ("chrome", "Google Chrome"),
            "2Ô∏è‚É£": ("anydesk", "AnyDesk"),
            "3Ô∏è‚É£": ("telegram", "Telegram"),
            "4Ô∏è‚É£": ("libreoffice", "LibreOffice"),
            "5Ô∏è‚É£": ("capcut", "CapCut"),
            "6Ô∏è‚É£": ("adspower", "ADSPower")
        }
        
        program_key, program_name = program_mapping[message.text]
        program_url = DOWNLOAD_URLS[program_key]
        program_description = PROGRAM_INFO[program_key]
        
        await message.answer(
            f"*{program_name}*\n\n"
            f"{program_description}\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
            reply_markup=get_download_button(program_url),
            parse_mode="Markdown"
        )

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def handle_admin_reply(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ callback_data
    user_id = int(callback.data.split('_')[1])
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await callback.bot.get_chat(user_id)
        username = user.username
        
        if username:
            # –Ø–∫—â–æ —î username, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç
            chat_link = f"https://t.me/{username}"
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î username, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID
            chat_link = f"tg://user?id={user_id}"
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        await callback.message.answer(
            f"*–Ø –ø–æ—Ç—É—Ä–±—É–≤–∞–≤—Å—è –ø—Ä–æ –≤–∞—à —á–∞—Å, —Ç–æ –∂ –æ—Å—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:*\n"
            f"[–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç]({chat_link})",
            parse_mode="Markdown"
        )
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in handle_admin_reply: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç")

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ü—ñ–Ω–∫–∏
async def handle_rating(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫—É –∑ callback_data
        rating = int(callback.data.split('_')[1])
        
        # –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É
        await callback.message.answer(
            TEXTS["rating_thanks"],
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
        await callback.answer()
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        logging.info(f"User {callback.from_user.id} rated the bot with {rating} stars")
        
    except Exception as e:
        logging.error(f"Error in handle_rating: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ—Ü—ñ–Ω–∫–∏") 