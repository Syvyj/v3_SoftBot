"""
Telegram –±–æ—Ç –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è.
–û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–∫–µ—Ä–∞ YaWare
- –ü–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
- –ó–≤ º—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""

import asyncio
import logging
import signal
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.fsm.storage.memory import MemoryStorage

from src import (
    BOT_TOKEN,
    COMMANDS,
    cmd_start,
    cmd_help,
    handle_main_menu,
    handle_yaware_menu,
    handle_help_request,
    handle_admin_request,
    handle_other_programs,
    handle_admin_reply,
    handle_rating
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(
    level=logging.INFO,
    format=log_format,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(
            Path('data/support_bot.log').absolute(),
            encoding='utf-8'
        )
    ]
)
logger = logging.getLogger(__name__)

# Ensure required directories exist
Path('data').mkdir(exist_ok=True)
Path('images').mkdir(exist_ok=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
dp.message.register(cmd_start, Command("start"))
dp.message.register(cmd_help, Command("help"))

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
dp.message.register(handle_main_menu, lambda message: message.text in [
    "üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä",
    "‚úÖ –Ø —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª",
    "üîß –î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞"
])

dp.message.register(handle_yaware_menu, lambda message: message.text in [
    "ü™ü Windows",
    "üçé MacOS",
    "üåê –ü–ª–∞–≥–∏–Ω",
    "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞",
    "‚úÖ –Ø —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
])

dp.message.register(handle_other_programs, lambda message: message.text in [
    "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£",
    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞"
])

dp.message.register(handle_admin_request, lambda message: message.text in [
    "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
    "üë®‚Äçüíª –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É",
    "üîß –î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
])

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ callback-–∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
dp.callback_query.register(handle_admin_reply, F.data.startswith("reply_"))

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –æ—Ü—ñ–Ω–∫–∏
dp.callback_query.register(handle_rating, F.data.startswith("rate_"))

# –í—Å—ñ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —è–∫ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É
dp.message.register(handle_help_request)

async def on_startup():
    """–î—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        await bot.set_my_commands(COMMANDS)
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        bot_commands = await bot.get_my_commands()
        if not bot_commands:
            logger.warning("Commands were not set properly!")
        else:
            logger.info(f"Bot started with {len(bot_commands)} commands")
    except Exception as e:
        logger.error(f"Error setting commands: {e}")

async def on_shutdown():
    """–î—ñ—ó –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞"""
    logger.info("Shutting down...")
    try:
        await bot.session.close()
        logger.info("Bot session closed")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    finally:
        logger.info("Bye!")

def handle_signals():
    """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            sig,
            lambda s=sig: asyncio.create_task(shutdown(sig=s))
        )

async def shutdown(sig: signal.Signals):
    """Graceful shutdown"""
    logger.info(f'Received signal {sig.name}...')
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [task.cancel() for task in tasks]
    logger.info(f'Cancelling {len(tasks)} outstanding tasks')
    await asyncio.gather(*tasks, return_exceptions=True)
    await on_shutdown()
    loop = asyncio.get_event_loop()
    loop.stop()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        logger.info("Starting bot...")
        handle_signals()
        await on_startup()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user (KeyboardInterrupt)")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {e}")
    finally:
        sys.exit(0) 